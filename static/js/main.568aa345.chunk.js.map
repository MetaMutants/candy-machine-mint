{"version":3,"sources":["candy-machine.ts","components/ConnectionMintButton.tsx","components/Navbar.tsx","images/main_banner_place_holder.png","images/secondry_banner_place_holder.gif","images/nft/logo.gif","images/nft/nft_sample_1.gif","images/team/team_member_1.png","images/team/team_member_2.png","config/Config.tsx","images/twitter/Logo white.svg","images/discord/icon_clyde_white_RGB.svg","components/FooterLink.tsx","components/Footer.tsx","components/RoadMapElement.tsx","components/RoadMapContainer.tsx","components/TeamMember.tsx","components/TeamContainer.tsx","components/Story.tsx","components/About.tsx","components/ShowCase.tsx","pages/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","ConnectButton","styled","WalletDialogButton","CounterText","MintContainer","div","MintButton","Button","renderCounter","days","hours","minutes","seconds","_completed","ConnectionMintButton","props","useState","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsAvailable","setItemsRedeemed","setItemsRemaining","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","LAMPORTS_PER_SOL","useEffect","toBase58","toLocaleString","disabled","onClick","variant","CircularProgress","date","onMount","completed","onComplete","renderer","Snackbar","autoHideDuration","onClose","Alert","NavBar","Container","Navbar","className","expand","Brand","href","src","logo","alt","Toggle","Collapse","Nav","Link","Config","navbar","showcaseMain","backGroundImage","mainBanner","showcaseSecondary","secondaryBanner","about","name","image","nft1","text","story","title","roadMap","textLeft","textRight","teamMembers","teamMemberImage","teamMember1","teamMemberName","teamMemberLink","teamMemberTitle","teamMemberDescription","teamMember2","teamMember3","footerLinks","link","footerText","FooterLink","Col","lg","target","rel","Footer","Row","map","item","index","getFullYear","RoadMapElement","RoadMapContainer","roadMapTitle","TeamMember","TeamContainer","teamTitle","teamName","Story","About","ShowCase","style","backgroundImage","Home","process","network","Connection","startDateSeed","parseInt","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","AOS","init","refresh","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.568aa345.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\r\n);\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection;\r\n  program: anchor.Program;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  candyMachine: CandyMachine;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  goLiveDate: Date,\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result: any, context: any) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineState> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"recent\",\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(\r\n    CANDY_MACHINE_PROGRAM,\r\n    provider\r\n  );\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n  const candyMachine = {\r\n    id: candyMachineId,\r\n    connection,\r\n    program,\r\n  }\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  let goLiveDate = state.data.goLiveDate.toNumber();\r\n  goLiveDate = new Date(goLiveDate * 1000);\r\n\r\n  return {\r\n    candyMachine,\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  };\r\n}\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getTokenWallet = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  mint: anchor.web3.PublicKey\r\n) => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachine,\r\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\r\n  payer: anchor.web3.PublicKey,\r\n  treasury: anchor.web3.PublicKey,\r\n): Promise<string> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const token = await getTokenWallet(payer, mint.publicKey);\r\n  const { connection, program } = candyMachine;\r\n  const metadata = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const rent = await connection.getMinimumBalanceForRentExemption(\r\n    MintLayout.span\r\n  );\r\n\r\n  return await program.rpc.mintNft({\r\n    accounts: {\r\n      config,\r\n      candyMachine: candyMachine.id,\r\n      payer: payer,\r\n      wallet: treasury,\r\n      mint: mint.publicKey,\r\n      metadata,\r\n      masterEdition,\r\n      mintAuthority: payer,\r\n      updateAuthority: payer,\r\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n    },\r\n    signers: [mint],\r\n    instructions: [\r\n      anchor.web3.SystemProgram.createAccount({\r\n        fromPubkey: payer,\r\n        newAccountPubkey: mint.publicKey,\r\n        space: MintLayout.span,\r\n        lamports: rent,\r\n        programId: TOKEN_PROGRAM_ID,\r\n      }),\r\n      Token.createInitMintInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        0,\r\n        payer,\r\n        payer\r\n      ),\r\n      createAssociatedTokenAccountInstruction(\r\n        token,\r\n        payer,\r\n        payer,\r\n        mint.publicKey\r\n      ),\r\n      Token.createMintToInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        mint.publicKey,\r\n        token,\r\n        payer,\r\n        [],\r\n        1\r\n      ),\r\n    ],\r\n  });\r\n}\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}","import React, {useEffect, useState} from \"react\";\r\nimport {Button, CircularProgress, Snackbar} from \"@material-ui/core\";\r\nimport Countdown from \"react-countdown\";\r\nimport {LAMPORTS_PER_SOL} from \"@solana/web3.js\";\r\nimport styled from \"styled-components\";\r\nimport {WalletDialogButton} from \"@solana/wallet-adapter-material-ui\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachine,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  shortenAddress,\r\n} from \"../candy-machine\";\r\n\r\nimport {useAnchorWallet} from \"@solana/wallet-adapter-react\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)``;\r\nconst CounterText = styled.span``; // add your styles here\r\nconst MintContainer = styled.div``; // add your styles here\r\nconst MintButton = styled(Button)``; // add your styles here\r\n\r\nexport interface ConnectionMintButtonProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst ConnectionMintButton = (props: ConnectionMintButtonProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\r\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\r\n\r\n  const wallet = useAnchorWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsMinting(true);\r\n      if (wallet && candyMachine?.program) {\r\n        const mintTxId = await mintOneToken(\r\n            candyMachine,\r\n            props.config,\r\n            wallet.publicKey,\r\n            props.treasury\r\n        );\r\n\r\n        const status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            \"singleGossip\",\r\n            false\r\n        );\r\n\r\n        if (!status?.err) {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Mint succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Mint failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Minting failed! Please try again!\";\r\n      if (!error.msg) {\r\n        if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          setIsSoldOut(true);\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      setIsMinting(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, props.connection]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (!wallet) return;\r\n\r\n      const {\r\n        candyMachine,\r\n        goLiveDate,\r\n        itemsAvailable,\r\n        itemsRemaining,\r\n        itemsRedeemed,\r\n      } = await getCandyMachineState(\r\n          wallet as anchor.Wallet,\r\n          props.candyMachineId,\r\n          props.connection\r\n      );\r\n\r\n      setItemsAvailable(itemsAvailable);\r\n      setItemsRemaining(itemsRemaining);\r\n      setItemsRedeemed(itemsRedeemed);\r\n\r\n      setIsSoldOut(itemsRemaining === 0);\r\n      setStartDate(goLiveDate);\r\n      setCandyMachine(candyMachine);\r\n    })();\r\n  }, [wallet, props.candyMachineId, props.connection]);\r\n\r\n\r\n  return (\r\n      <div>\r\n        {wallet && (\r\n            <p>Wallet {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\r\n        )}\r\n\r\n        {wallet && <p>Balance: {(balance || 0).toLocaleString()} SOL</p>}\r\n\r\n        {wallet && <p>Total Available: {itemsAvailable}</p>}\r\n\r\n        {wallet && <p>Redeemed: {itemsRedeemed}</p>}\r\n\r\n        {wallet && <p>Remaining: {itemsRemaining}</p>}\r\n\r\n        <MintContainer>\r\n          {!wallet ? (\r\n              <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n              <MintButton\r\n                  disabled={isSoldOut || isMinting || !isActive}\r\n                  onClick={onMint}\r\n                  variant=\"contained\"\r\n              >\r\n                {isSoldOut ? (\r\n                    \"SOLD OUT\"\r\n                ) : isActive ? (\r\n                    isMinting ? (\r\n                        <CircularProgress/>\r\n                    ) : (\r\n                        \"MINT\"\r\n                    )\r\n                ) : (\r\n                    <Countdown\r\n                        date={startDate}\r\n                        onMount={({completed}) => completed && setIsActive(true)}\r\n                        onComplete={() => setIsActive(true)}\r\n                        renderer={renderCounter}\r\n                    />\r\n                )}\r\n              </MintButton>\r\n          )}\r\n        </MintContainer>\r\n        <Snackbar\r\n            open={alertState.open}\r\n            autoHideDuration={6000}\r\n            onClose={() => setAlertState({ ...alertState, open: false })}\r\n        >\r\n          <Alert\r\n              onClose={() => setAlertState({ ...alertState, open: false })}\r\n              severity={alertState.severity}\r\n          >\r\n            {alertState.message}\r\n          </Alert>\r\n        </Snackbar>\r\n      </div>\r\n  );\r\n}\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nconst renderCounter = ({days, hours, minutes, seconds, _completed}: any) => {\r\n  return (\r\n      <CounterText>\r\n        {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\r\n      </CounterText>\r\n  );\r\n};\r\n\r\nexport default ConnectionMintButton;\r\n","import React from \"react\";\r\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\r\nimport \"./navbar.scss\";\r\nimport ConnectionMintButton from \"./ConnectionMintButton\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nexport interface NavBarProps {\r\n  logo: string;\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst NavBar = (props: NavBarProps) => {\r\n  return (\r\n      <div>\r\n        <Container>\r\n          <Navbar className=\"cus-nav\" variant=\"dark\" expand=\"lg\">\r\n            <Navbar.Brand href=\"#top\" className=\"font-weight-bold text-uppercase\">\r\n              <img\r\n                  className=\"img-fluid nav-logo\"\r\n                  src={props.logo}\r\n                  alt={\"\"}\r\n              />\r\n            </Navbar.Brand>\r\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n            <Navbar.Collapse id=\"basic-navbar-nav\">\r\n              <Nav className=\"ml-auto\">\r\n                <Nav.Link href=\"#about\" className=\"link-style linkh\">\r\n                  Story\r\n                </Nav.Link>\r\n                <Nav.Link href=\"#story\" className=\"link-style linkh\">\r\n                  About\r\n                </Nav.Link>\r\n                <Nav.Link href=\"#team\" className=\"link-style linkh\">\r\n                  Team\r\n                </Nav.Link>\r\n                <Nav.Link className=\"link-style btn btn-outline-warning\">\r\n                  {<ConnectionMintButton\r\n                        candyMachineId={props.candyMachineId}\r\n                        config={props.config}\r\n                        connection={props.connection}\r\n                        startDate={props.startDate}\r\n                        treasury={props.treasury}\r\n                        txTimeout={props.txTimeout}\r\n                    />\r\n                   }\r\n                </Nav.Link>\r\n              </Nav>\r\n            </Navbar.Collapse>\r\n          </Navbar>\r\n        </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","export default __webpack_public_path__ + \"static/media/main_banner_place_holder.c85eee2d.png\";","export default __webpack_public_path__ + \"static/media/secondry_banner_place_holder.499c6098.gif\";","export default __webpack_public_path__ + \"static/media/logo.656b839c.gif\";","export default __webpack_public_path__ + \"static/media/nft_sample_1.2c42706e.gif\";","export default __webpack_public_path__ + \"static/media/team_member_1.1cf53f43.png\";","export default __webpack_public_path__ + \"static/media/team_member_2.576bbcbd.png\";","import mainBanner from '../images/main_banner_place_holder.png';\r\nimport secondaryBanner from '../images/secondry_banner_place_holder.gif';\r\nimport logo from '../images/nft/logo.gif';\r\nimport nft1 from '../images/nft/nft_sample_1.gif';\r\nimport teamMember1 from '../images/team/team_member_1.png';\r\nimport teamMember2 from '../images/team/team_member_2.png';\r\nimport teamMember3 from '../images/team/team_member_2.png';\r\nimport twitterLogo from '../images/twitter/Logo white.svg';\r\nimport discordLogo from '../images/discord/icon_clyde_white_RGB.svg';\r\n\r\nconst Config = {\r\n  navbar: {\r\n    logo: logo\r\n  },\r\n  showcaseMain: {\r\n    backGroundImage: mainBanner,\r\n  },\r\n  showcaseSecondary: {\r\n    backGroundImage: secondaryBanner,\r\n  },\r\n  about: {\r\n    name: 'MetaMutants',\r\n    image: nft1,\r\n    text: 'MetaMutants once lived in harmony in Web2, but this harmony was short-lived. Everything changed when deciding to move to Web3 for a better future. The disagreement began on the superior blockchain to move to. The conflict split the MetaMutants into two groups: 5,000  that supported Solana and 5,000 that supported Ethereum. After a terrible civil war, half the population was eradicated. The two groups agreed for their civilization to coexist on both blockchains. This evenly split the Mutants 2,500 and 2,500 between Solana and Ethereum. By buying a MetaMutant on the Solana blockchain, you will be whitelisted to get a MetaMutant on the Ethereum blockchain in the future. Which blockchain do you support?'\r\n  },\r\n  story: {\r\n    title: 'About',\r\n    text: 'Each MetaMartian NFT will be used as an exclusive access pass— to our community discord (unlock able content) AND irl events involving the innovations in blockchain technology, software, and coding. In the discord, Martians will be granted access to groups that empower youth creatives, and give a platform for our founders to educate and provide tutorials. These tutorials will allow you to create your own collection, code your own contract, and ultimately create your own community. Mint a a MetaMartian and join the youth movement of creators!'\r\n  },\r\n  roadMap: [\r\n    {\r\n      textLeft: '10%',\r\n      textRight: 'Web 3.0 tutorial video release (Discord) Bonus: Generating the metadata for images in collection'\r\n    },\r\n    {\r\n      textLeft: '20%',\r\n      textRight: 'Smart Contract tutorial video release (Discord) Bonus: uploading the collection to the blockchain'\r\n    },\r\n    {\r\n      textLeft: '30%',\r\n      textRight: 'IRL networking event: location TBD '\r\n    },\r\n    {\r\n      textLeft: '40%',\r\n      textRight: 'Community vote on purchase of NFT collectible created by a a young entrepreneur (discord will be loaded with information and education around the collectible— why its valuable, rarity relevances, token utility, etc)'\r\n    },\r\n    {\r\n      textLeft: '50%',\r\n      textRight: 'IRL networking party to celebrate whitelist backers and Ethereum minting CHARITY: 10k donation to Save the Children'\r\n    },\r\n    {\r\n      textLeft: '60%',\r\n      textRight: 'Exclusive Merch Release by Cards and Culture'\r\n    },\r\n    {\r\n      textLeft: '70%',\r\n      textRight: 'Community vote on purchase of a historic collectible (cryptopunks, bored ape, doodles, etc)'\r\n    },\r\n    {\r\n      textLeft: '80%',\r\n      textRight: 'How to make a landing page, build a community, and deploy a contract tutorial (Discord)'\r\n    },\r\n    {\r\n      textLeft: '90%',\r\n      textRight: 'CONTEST: create your own artwork for the founders to pick a winner— winner gets to mint their contract with the founders and create video for YouTube, Twitch, etc'\r\n    },\r\n    {\r\n      textLeft: '100%',\r\n      textRight: ' GIVEAWAY— 50k in ETH, 10 NFT’s, charity donation of 25k possible tech conference on a larger regional location (New Orleans, Houston)'\r\n    },\r\n  ],\r\n  teamMembers: [\r\n    {\r\n      teamMemberImage: teamMember1,\r\n      teamMemberName: \"Jordan\",\r\n      teamMemberLink: \"#\",\r\n      teamMemberTitle: \"Developer\",\r\n      teamMemberDescription: \"Aspiring full stack developer\"\r\n    },\r\n    {\r\n      teamMemberImage: teamMember2,\r\n      teamMemberName: \"Zach\",\r\n      teamMemberLink: \"#\",\r\n      teamMemberTitle: \"Artist\",\r\n      teamMemberDescription: \"Aspiring entrepreneur and artist\"\r\n    },\r\n    {\r\n      teamMemberImage: teamMember3,\r\n      teamMemberName: \"Anthony Ranaudo\",\r\n      teamMemberLink: \"#\",\r\n      teamMemberTitle: \"Creative Director\",\r\n      teamMemberDescription: \"Creator of Card and Culture and ex-professional MLB player\"\r\n    }\r\n  ],\r\n  footerLinks: [\r\n    {\r\n      image: twitterLogo,\r\n      link: 'https://twitter.com/MetaMutants'\r\n    },\r\n    {\r\n      image: discordLogo,\r\n      link: 'https://discord.gg/u3c9Kf3Xmz'\r\n    }\r\n  ],\r\n  footerText: \"All rights reserved\",\r\n};\r\n\r\nexport default Config;","export default __webpack_public_path__ + \"static/media/Logo white.23e6bb64.svg\";","export default __webpack_public_path__ + \"static/media/icon_clyde_white_RGB.a4202270.svg\";","import {Col} from \"react-bootstrap\";\r\nimport React from \"react\";\r\n\r\nexport interface FooterLinkProps {\r\n  image: string;\r\n  link: string;\r\n}\r\n\r\nconst FooterLink = (props: FooterLinkProps) => {\r\n  return (\r\n      <Col lg=\"4\" className=\"mb-4\">\r\n          <div className=\"mbc social-logo h-100 d-flex justify-content-around align-items-center text-center\">\r\n\r\n          <a\r\n              href={props.link}\r\n              target={\"_blank\"}\r\n              rel=\"noreferrer\"\r\n          >\r\n            <img\r\n                className=\"footer-social img-fluid\"\r\n                src={props.image}\r\n                alt={\"\"}\r\n            />\r\n          </a>\r\n        </div>\r\n      </Col>\r\n  );\r\n}\r\n\r\nexport default FooterLink;","import React from \"react\";\r\nimport \"./footer.scss\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport Config from '../config/Config';\r\nimport FooterLink from \"./FooterLink\";\r\n\r\nexport interface FooterProps {\r\n  footerText: string;\r\n}\r\n\r\nconst Footer = (props: FooterProps) => {\r\n  return (\r\n      <div className=\"footer p-3\">\r\n        <Container className=\"\">\r\n          <Row>\r\n            {\r\n              Config.footerLinks.map((item, index) => {\r\n                return <FooterLink\r\n                  key={index}\r\n                  image={item.image}\r\n                  link={item.link}\r\n                  />\r\n              })\r\n            }\r\n            <Col lg=\"4\" className=\"mb-4\">\r\n              <div className=\"mbc h-100 d-flex justify-content-center align-items-center\">\r\n                <div className=\"\">\r\n                <span className=\"font-weight-bold\">\r\n                  © {new Date().getFullYear()} All Rights Reserved.\r\n                </span>\r\n                  <br />\r\n                    {props.footerText}\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import './roadmap.scss';\r\n\r\nexport interface RoadMapElementProps {\r\n  textLeft: string;\r\n  textRight: string\r\n}\r\n\r\nconst RoadMapElement = (props: RoadMapElementProps) => {\r\n  return (\r\n      <div className=\"row text-wrapper\">\r\n        <span data-aos=\"fade-right\" data-aos-duration=\"2000\"\r\n              className=\"col-sm-2 number-text aos-init aos-animate\">\r\n          {props.textLeft}\r\n        </span>\r\n        <span\r\n            data-aos=\"fade-left\"\r\n            data-aos-duration=\"2000\"\r\n            className=\"col-sm-10 subtitle aos-init aos-animate\">\r\n        {props.textRight}\r\n        </span>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default RoadMapElement;","import Config from '../config/Config';\r\nimport {Col, Container, Row} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport RoadMapElement from \"./RoadMapElement\";\r\nimport './roadmap.scss';\r\n\r\nexport interface RoadMapContainerProps {\r\n  roadMapTitle: string;\r\n}\r\n\r\nconst RoadMapContainer = (props: RoadMapContainerProps) => {\r\n\r\n  return (\r\n      <div id=\"roadmap\" className=\"roadmap\">\r\n        <Container className=\" h-100\">\r\n          <Row className=\" h-100\">\r\n            <Col lg=\"12\" className=\"\">\r\n              <div className=\"\">\r\n                <h1\r\n                    data-aos=\"fade-in\"\r\n                    data-aos-duration=\"2000\"\r\n                    className=\"title text-uppercase\"\r\n                >\r\n                  {props.roadMapTitle}\r\n                </h1>\r\n                {\r\n                  Config.roadMap.map((item, index) => {\r\n                    return <RoadMapElement\r\n                        key={index}\r\n                        textLeft={item.textLeft}\r\n                        textRight={item.textRight}\r\n                    />\r\n                  })\r\n                }\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default RoadMapContainer;","import {Col} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport './team.scss';\r\n\r\nexport interface TeamMemberProps {\r\n  teamMemberImage: string;\r\n  teamMemberName: string;\r\n  teamMemberLink: string;\r\n  teamMemberTitle: string;\r\n  teamMemberDescription: string;\r\n}\r\n\r\nconst TeamMember = (props: TeamMemberProps) => {\r\n  return (\r\n      <Col\r\n          data-aos=\"fade-in\"\r\n          data-aos-duration=\"2000\"\r\n          lg=\"4\"\r\n          className=\"\"\r\n      >\r\n        <div className=\"\">\r\n          <img\r\n              className=\"img-fluid team-img\"\r\n              src={props.teamMemberImage}\r\n              alt={\"\"}\r\n          />\r\n          <h3 className=\"title mt-2\">\r\n            {props.teamMemberName}\r\n          </h3>\r\n          <p className=\"subtitle\">\r\n            <a\r\n                href={props.teamMemberLink}\r\n                target=\"_blank\"\r\n                rel={\"noreferrer\"}\r\n            >\r\n              {props.teamMemberTitle}\r\n            </a>\r\n            , {props.teamMemberDescription}\r\n          </p>\r\n        </div>\r\n      </Col>\r\n  );\r\n}\r\n\r\nexport default TeamMember;","import {Container, Row} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport Config from '../config/Config';\r\nimport TeamMember from \"./TeamMember\";\r\nimport './team.scss';\r\n\r\nexport interface TeamContainerProps {\r\n  teamTitle: string;\r\n  teamName: string;\r\n}\r\n\r\nconst TeamContainer = (props: TeamContainerProps) => {\r\n  return (\r\n      <div id=\"team\" className=\"team\">\r\n        <Container className=\" h-100\">\r\n          <div className=\"\">\r\n            <h1 data-aos=\"fade-in\" data-aos-duration=\"2000\" className=\"title\">\r\n              {props.teamTitle}\r\n            </h1>\r\n            <span className=\"sub\">\r\n              {props.teamName}\r\n            </span>\r\n          </div>\r\n          <Row className=\"h-100 mt-5\">\r\n            {\r\n              Config.teamMembers.map((item, index) => {\r\n                return <TeamMember\r\n                    key={index}\r\n                    teamMemberImage={item.teamMemberImage}\r\n                    teamMemberName={item.teamMemberName}\r\n                    teamMemberLink={item.teamMemberLink}\r\n                    teamMemberTitle={item.teamMemberTitle}\r\n                    teamMemberDescription={item.teamMemberDescription}\r\n                />\r\n              })\r\n            }\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default TeamContainer;","import {Col, Container, Row} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport './story.scss';\r\n\r\nexport interface StoryProps {\r\n  title: string;\r\n  text: string;\r\n}\r\n\r\nconst Story = (props: StoryProps) => {\r\n  return (\r\n      <div id=\"story\" className=\"story\">\r\n        <Container\r\n            data-aos=\"fade-up\"\r\n            data-aos-duration=\"2000\"\r\n            className=\"mt-5 h-100\"\r\n        >\r\n          <Row className=\"h-100\">\r\n            <Col lg=\"12\" className=\"\">\r\n              <div className=\"\">\r\n                <h1 className=\"title\">\r\n                  {props.title}\r\n                </h1>\r\n                <p className=\"subtitle\">\r\n                  {props.text}\r\n                </p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Story;","import {Col, Container, Row} from \"react-bootstrap\";\r\nimport React from \"react\";\r\nimport './about.scss';\r\n\r\nexport interface AboutProps {\r\n  name: string;\r\n  image: string;\r\n  text: string;\r\n}\r\n\r\nconst About = (props: AboutProps) => {\r\n  return (\r\n      <div id=\"about\" className=\"about\">\r\n        <Container className=\" h-100\">\r\n          <Row className=\" h-100\">\r\n            <Col\r\n                lg=\"6\"\r\n                className=\"d-flex align-items-center justify-content-center\"\r\n                data-aos=\"fade-right\"\r\n                data-aos-duration=\"2000\"\r\n            >\r\n              <div className=\"aboutimg\">\r\n                <img className=\"img-fluid about-img\" src={props.image} alt=\"\"/>\r\n              </div>\r\n            </Col>\r\n            <Col\r\n                lg=\"6\"\r\n                className=\"d-flex align-items-center\"\r\n                data-aos=\"fade-left\"\r\n                data-aos-duration=\"2000\"\r\n            >\r\n              <div className=\"about-text\">\r\n                <h1 className=\"title text-uppercase\">\r\n                  What is {props.name}?\r\n                </h1>\r\n                <p className=\"mt-3 subtitle\">\r\n                  {props.text}\r\n                </p>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\nimport './showcase.scss';\r\n\r\nexport interface ShowcaseProps {\r\n  backGroundImage: string;\r\n}\r\n\r\nconst ShowCase = (props: ShowcaseProps) => {\r\n  return (\r\n      <div className=\"showcase\"\r\n           style={{\r\n             backgroundImage: `url(${props.backGroundImage})`\r\n           }}\r\n      />\r\n  );\r\n}\r\n\r\nexport default ShowCase;","import React from \"react\";\r\nimport \"./home.scss\";\r\nimport NavBar from \"../components/Navbar\";\r\nimport Footer from \"../components/Footer\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport Config from '../config/Config';\r\nimport RoadMapContainer from \"../components/RoadMapContainer\";\r\nimport TeamContainer from \"../components/TeamContainer\";\r\nimport Story from \"../components/Story\";\r\nimport About from \"../components/About\";\r\nimport ShowCase from \"../components/ShowCase\";\r\n\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  return (\r\n      <div id={\"home\"} className=\"root home\">\r\n        <NavBar\r\n            logo={Config.navbar.logo}\r\n            candyMachineId={props.candyMachineId}\r\n            config={props.config}\r\n            connection={props.connection}\r\n            startDate={props.startDate}\r\n            treasury={props.treasury}\r\n            txTimeout={props.txTimeout}\r\n        />\r\n        <ShowCase backGroundImage={Config.showcaseMain.backGroundImage}/>\r\n        <About name={Config.about.name} image={Config.about.image} text={Config.about.text}/>\r\n        <ShowCase backGroundImage={Config.showcaseSecondary.backGroundImage}/>\r\n        <Story title={Config.story.title} text={Config.story.text}/>\r\n        <RoadMapContainer roadMapTitle={'Roadmap'}/>\r\n        <TeamContainer teamName={'Of MetaMutants'} teamTitle={'Creators'}/>\r\n        <Footer footerText={'MetaMutants created by Jordan and Zach'}/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport \"./App.css\";\r\nimport React, {useEffect} from \"react\";\r\nimport AOS from \"aos\";\r\nimport \"aos/dist/aos.css\";\r\nimport { useMemo } from \"react\";\r\n\r\nimport Home from \"./pages/Home\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\r\n\r\nconst treasury = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_TREASURY_ADDRESS!\r\n);\r\n\r\nconst config = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\r\n);\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\n\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(rpcHost);\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        type: 'dark',\r\n    },\r\n    overrides: {\r\n        MuiButtonBase: {\r\n            root: {\r\n                justifyContent: 'flex-start',\r\n            },\r\n        },\r\n        MuiButton: {\r\n            root: {\r\n                textTransform: undefined,\r\n                padding: '12px 16px',\r\n            },\r\n            startIcon: {\r\n                marginRight: 8,\r\n            },\r\n            endIcon: {\r\n                marginLeft: 8,\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n        getPhantomWallet(),\r\n        getSlopeWallet(),\r\n        getSolflareWallet(),\r\n        getSolletWallet({ network }),\r\n        getSolletExtensionWallet({ network })\r\n    ],\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    AOS.init();\r\n    AOS.refresh();\r\n  }, []);\r\n\r\n  return (\r\n      <ThemeProvider theme={theme}>\r\n        <ConnectionProvider endpoint={endpoint}>\r\n          <WalletProvider wallets={wallets} autoConnect>\r\n            <WalletDialogProvider>\r\n              <Home\r\n                candyMachineId={candyMachineId}\r\n                config={config}\r\n                connection={connection}\r\n                startDate={startDateSeed}\r\n                treasury={treasury}\r\n                txTimeout={txTimeout}\r\n              />\r\n            </WalletDialogProvider>\r\n          </WalletProvider>\r\n        </ConnectionProvider>\r\n      </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}